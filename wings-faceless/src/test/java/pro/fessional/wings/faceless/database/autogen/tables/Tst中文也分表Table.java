/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.faceless.database.autogen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import pro.fessional.wings.faceless.database.autogen.DefaultSchema;
import pro.fessional.wings.faceless.database.autogen.tables.records.Tst中文也分表Record;
import pro.fessional.wings.faceless.service.lightid.LightIdAware;


/**
 * The table <code>wings_0.TST_中文也分表</code>.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tst中文也分表Table extends TableImpl<Tst中文也分表Record> implements LightIdAware {

    private static final long serialVersionUID = 901348919;

    /**
     * The reference instance of <code>TST_中文也分表</code>
     */
    public static final Tst中文也分表Table TST_中文也分表 = new Tst中文也分表Table();
    public static final Tst中文也分表Table AS_F1 = TST_中文也分表.as("F1");

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Tst中文也分表Record> getRecordType() {
        return Tst中文也分表Record.class;
    }

    /**
     * The column <code>TST_中文也分表.ID</code>.
     */
    public final TableField<Tst中文也分表Record, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>TST_中文也分表.CREATE_DT</code>.
     */
    public final TableField<Tst中文也分表Record, LocalDateTime> CREATE_DT = createField("CREATE_DT", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建日时");

    /**
     * The column <code>TST_中文也分表.MODIFY_DT</code>.
     */
    public final TableField<Tst中文也分表Record, LocalDateTime> MODIFY_DT = createField("MODIFY_DT", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1000-01-01 00:00:00", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "修改日时");

    /**
     * The column <code>TST_中文也分表.COMMIT_ID</code>.
     */
    public final TableField<Tst中文也分表Record, Long> COMMIT_ID = createField("COMMIT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "提交ID");

    /**
     * The column <code>TST_中文也分表.LOGIN_INFO</code>.
     */
    public final TableField<Tst中文也分表Record, String> LOGIN_INFO = createField("LOGIN_INFO", org.jooq.impl.SQLDataType.CLOB, this, "登陆信息，用户，终端等");

    /**
     * The column <code>TST_中文也分表.OTHER_INFO</code>.
     */
    public final TableField<Tst中文也分表Record, String> OTHER_INFO = createField("OTHER_INFO", org.jooq.impl.SQLDataType.CLOB, this, "其他信息，业务侧自定义");

    /**
     * Create a <code>TST_中文也分表</code> table reference
     */
    public Tst中文也分表Table() {
        this(DSL.name("TST_中文也分表"), null);
    }

    /**
     * Create an aliased <code>TST_中文也分表</code> table reference
     */
    public Tst中文也分表Table(String alias) {
        this(DSL.name(alias), TST_中文也分表);
    }

    /**
     * Create an aliased <code>TST_中文也分表</code> table reference
     */
    public Tst中文也分表Table(Name alias) {
        this(alias, TST_中文也分表);
    }

    private Tst中文也分表Table(Name alias, Table<Tst中文也分表Record> aliased) {
        this(alias, aliased, null);
    }

    private Tst中文也分表Table(Name alias, Table<Tst中文也分表Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("变更日志"));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Tst中文也分表Record> getPrimaryKey() {
        return Internal.createUniqueKey(pro.fessional.wings.faceless.database.autogen.tables.Tst中文也分表Table.TST_中文也分表, "KEY_TST_中文也分表_PRIMARY", pro.fessional.wings.faceless.database.autogen.tables.Tst中文也分表Table.TST_中文也分表.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Tst中文也分表Record>> getKeys() {
        return Arrays.<UniqueKey<Tst中文也分表Record>>asList(
              Internal.createUniqueKey(pro.fessional.wings.faceless.database.autogen.tables.Tst中文也分表Table.TST_中文也分表, "KEY_TST_中文也分表_PRIMARY", pro.fessional.wings.faceless.database.autogen.tables.Tst中文也分表Table.TST_中文也分表.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tst中文也分表Table as(String alias) {
        return new Tst中文也分表Table(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tst中文也分表Table as(Name alias) {
        return new Tst中文也分表Table(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tst中文也分表Table rename(String name) {
        return new Tst中文也分表Table(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tst中文也分表Table rename(Name name) {
        return new Tst中文也分表Table(name, null);
    }
}
