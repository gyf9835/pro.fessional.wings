/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.tiny.task.database.autogen.tables;


import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import pro.fessional.wings.faceless.database.jooq.WingsJournalTable;
import pro.fessional.wings.faceless.service.lightid.LightIdAware;
import pro.fessional.wings.tiny.task.database.autogen.DefaultSchemaTinyTask;
import pro.fessional.wings.tiny.task.database.autogen.tables.records.WinTaskResultRecord;

import javax.annotation.processing.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * The table <code>wings_radiant.win_task_result</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16",
        "schema version:2020102701"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WinTaskResultTable extends TableImpl<WinTaskResultRecord> implements WingsJournalTable<WinTaskResultTable>, LightIdAware {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>win_task_result</code>
     */
    public static final WinTaskResultTable WinTaskResult = new WinTaskResultTable();
    public static final WinTaskResultTable asS3 = WinTaskResult.as(pro.fessional.wings.faceless.database.jooq.WingsJooqEnv.uniqueAlias());

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WinTaskResultRecord> getRecordType() {
        return WinTaskResultRecord.class;
    }

    /**
     * The column <code>win_task_result.id</code>.
     */
    public final TableField<WinTaskResultRecord, Long> Id = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>win_task_result.task_id</code>.
     */
    public final TableField<WinTaskResultRecord, Long> TaskId = createField(DSL.name("task_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>win_task_result.task_app</code>.
     */
    public final TableField<WinTaskResultRecord, String> TaskApp = createField(DSL.name("task_app"), SQLDataType.VARCHAR(300).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>win_task_result.task_pid</code>.
     */
    public final TableField<WinTaskResultRecord, Integer> TaskPid = createField(DSL.name("task_pid"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>win_task_result.task_msg</code>.
     */
    public final TableField<WinTaskResultRecord, String> TaskMsg = createField(DSL.name("task_msg"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>win_task_result.time_exec</code>.
     */
    public final TableField<WinTaskResultRecord, LocalDateTime> TimeExec = createField(DSL.name("time_exec"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.inline("1000-01-01 00:00:00.000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_task_result.time_fail</code>.
     */
    public final TableField<WinTaskResultRecord, LocalDateTime> TimeFail = createField(DSL.name("time_fail"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.inline("1000-01-01 00:00:00.000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_task_result.time_done</code>.
     */
    public final TableField<WinTaskResultRecord, LocalDateTime> TimeDone = createField(DSL.name("time_done"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.inline("1000-01-01 00:00:00.000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_task_result.time_cost</code>.
     */
    public final TableField<WinTaskResultRecord, Integer> TimeCost = createField(DSL.name("time_cost"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private WinTaskResultTable(Name alias, Table<WinTaskResultRecord> aliased) {
        this(alias, aliased, null);
    }

    private WinTaskResultTable(Name alias, Table<WinTaskResultRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>win_task_result</code> table reference
     */
    public WinTaskResultTable(String alias) {
        this(DSL.name(alias), WinTaskResult);
    }

    /**
     * Create an aliased <code>win_task_result</code> table reference
     */
    public WinTaskResultTable(Name alias) {
        this(alias, WinTaskResult);
    }

    /**
     * Create a <code>win_task_result</code> table reference
     */
    public WinTaskResultTable() {
        this(DSL.name("win_task_result"), null);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchemaTinyTask.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<WinTaskResultRecord> getPrimaryKey() {
        return Internal.createUniqueKey(WinTaskResultTable.WinTaskResult, DSL.name("KEY_win_task_result_PRIMARY"), new TableField[] { WinTaskResultTable.WinTaskResult.Id }, true);
    }

    @Override
    public List<UniqueKey<WinTaskResultRecord>> getKeys() {
        return Arrays.<UniqueKey<WinTaskResultRecord>>asList(
              Internal.createUniqueKey(WinTaskResultTable.WinTaskResult, DSL.name("KEY_win_task_result_PRIMARY"), new TableField[] { WinTaskResultTable.WinTaskResult.Id }, true)
        );
    }

    @Override
    public WinTaskResultTable as(String alias) {
        return new WinTaskResultTable(DSL.name(alias), this);
    }

    @Override
    public WinTaskResultTable as(Name alias) {
        return new WinTaskResultTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WinTaskResultTable rename(String name) {
        return new WinTaskResultTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WinTaskResultTable rename(Name name) {
        return new WinTaskResultTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, String, Integer, String, LocalDateTime, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * LightIdAware seqName
     */
    @Override
    @NotNull
    public String getSeqName() {
        return "win_task_result";
    }


    /**
     * alias asS3
     */
    @Override
    @NotNull
    public WinTaskResultTable getAliasTable() {
        return asS3;
    }
}
