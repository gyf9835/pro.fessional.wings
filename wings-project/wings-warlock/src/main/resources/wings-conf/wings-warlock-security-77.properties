# 权限是否使用Role
wings.warlock.security.authority-role=true
# 权限是否使用Perm
wings.warlock.security.authority-perm=true

# true以servlet的forward进行，否则redirect(302)跳转
wings.warlock.security.login-forward=true
# 未登录时跳转的页面，需要有controller处理
wings.warlock.security.login-page=/auth/login-page.json

# 处理登录的Ant格式URL，由filter处理，不需要controller
# 支持变量`authType`和`authZone`，可以通过param或path获得（PathPattern）
wings.warlock.security.login-url=/auth/{authType:[^-]+}{authZone}/login.json

# 登出地址，由filter处理，不需要controller
wings.warlock.security.logout-url=/auth/logout.json

# 登录成功返回的body
wings.warlock.security.login-success-body={"success":true,"message":"login success"}
# 登录失败返回的body
wings.warlock.security.login-failure-body={"success":false,"message":"{message}"}
# 登出成功返回的body
wings.warlock.security.logout-success-body={"success":true,"message":"logout success"}

# 同时登陆的session数
wings.warlock.security.session-maximum=1
# 过期时返回的内容
wings.warlock.security.session-expired-body={"success":false,"message":"session has been expired, possibly due to multiple logins"}

# username Parameter
wings.warlock.security.username-para=username
# password Parameter
wings.warlock.security.password-para=password

# GrantedAuthorityDefaults建议和spring一致，不用动
wings.warlock.security.role-prefix=ROLE_

# 需要任意权限的路径，antMatcher，逗号分隔，反斜杠换行
wings.warlock.security.authority[ROLE_SYSTEM]=/actuator/**

# 需要登录的路径，antMatcher，逗号分隔，反斜杠换行
#wings.warlock.security.authenticated=/user/**

# 无权限路径，antMatcher，逗号分隔，反斜杠换行
wings.warlock.security.permit-all[0]=/auth/**
wings.warlock.security.permit-all[1]=/api/**

# 支持的验证类型，enum全路径，一对一，否则反向解析有问题；不含`-`
wings.warlock.security.auth-type.username=pro.fessional.wings.warlock.service.auth.WarlockAuthType#USERNAME
wings.warlock.security.auth-type.mobile=pro.fessional.wings.warlock.service.auth.WarlockAuthType#MOBILE
wings.warlock.security.auth-type.email=pro.fessional.wings.warlock.service.auth.WarlockAuthType#EMAIL
wings.warlock.security.auth-type.github=me.zhyd.oauth.config.AuthDefaultSource#GITHUB
wings.warlock.security.auth-type.weibo=me.zhyd.oauth.config.AuthDefaultSource#WEIBO

# 支持Nonce的验证类型
wings.warlock.security.nonce-auth-type=username,mobile,email
# 默认的cache-manager bean name，同wings.slardar.cache.primary
wings.warlock.security.nonce-cache-manager=MemoryCacheManager
# 默认使用的缓存leve
wings.warlock.security.nonce-cache-level=service

# 支持自动注册用户的验证类型
#wings.warlock.security.autoreg-auth-type=github,weibo
# 自动注册用户时，最大连续失败次数，到达后锁账户
wings.warlock.security.autoreg-max-failed=5
# 自动注册用户时，默认凭证过期时间
wings.warlock.security.autoreg-expired=30D

# 内存用户，key用户说明，重复时覆盖，建议为`username`+[`/`+`auth-type`]
# auth-type=""时，为匹配全部auth-type
# 其他设置，参考WarlockAuthnService.Details 的类型及默认值

#wings.warlock.security.mem-user[root].auth-type=
#wings.warlock.security.mem-user[root].username=
#wings.warlock.security.mem-user[root].password=
#wings.warlock.security.mem-user[root].user-id=
#wings.warlock.security.mem-user[root].status= #默认ACTIVE
#wings.warlock.security.mem-user[root].nickname= # 默认username
#wings.warlock.security.mem-user[root].locale= # 默认Locale.getDefault()
#wings.warlock.security.mem-user[root].zone-id= # 默认ZoneId.systemDefault()
#wings.warlock.security.mem-user[root].passsalt= # 默认空
#wings.warlock.security.mem-user[root].expired= # 默认LocalDateTime.MAX

# 内存用户权限，key授权说明，重复时覆盖，建议以类型和用途
#wings.warlock.security.mem-auth[boot-admin].user-id=
#wings.warlock.security.mem-auth[boot-admin].username=
#wings.warlock.security.mem-auth[boot-admin].auth-type=
#wings.warlock.security.mem-auth[boot-admin].auth-role=
#wings.warlock.security.mem-auth[boot-admin].auth-perm=
