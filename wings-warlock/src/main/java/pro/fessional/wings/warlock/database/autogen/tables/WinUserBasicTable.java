/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.warlock.database.autogen.tables;


import org.jetbrains.annotations.NotNull;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import pro.fessional.wings.faceless.convention.EmptyValue;
import pro.fessional.wings.faceless.database.jooq.WingsJournalTable;
import pro.fessional.wings.faceless.database.jooq.converter.JooqConsEnumConverter;
import pro.fessional.wings.faceless.database.jooq.converter.JooqLocaleConverter;
import pro.fessional.wings.faceless.database.jooq.converter.JooqZoneIdConverter;
import pro.fessional.wings.faceless.service.journal.JournalService;
import pro.fessional.wings.faceless.service.lightid.LightIdAware;
import pro.fessional.wings.warlock.database.autogen.DefaultSchema;
import pro.fessional.wings.warlock.database.autogen.tables.records.WinUserBasicRecord;
import pro.fessional.wings.warlock.enums.autogen.UserGender;
import pro.fessional.wings.warlock.enums.autogen.UserStatus;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * The table <code>wings_warlock.win_user_basic</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:2020102402"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WinUserBasicTable extends TableImpl<WinUserBasicRecord> implements WingsJournalTable<WinUserBasicTable>, LightIdAware {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>win_user_basic</code>
     */
    public static final WinUserBasicTable WinUserBasic = new WinUserBasicTable();
        public static final WinUserBasicTable asL2 = WinUserBasic.as("l2");

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WinUserBasicRecord> getRecordType() {
        return WinUserBasicRecord.class;
    }

    /**
     * The column <code>win_user_basic.id</code>.
     */
    public final TableField<WinUserBasicRecord, Long> Id = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>win_user_basic.create_dt</code>.
     */
    public final TableField<WinUserBasicRecord, LocalDateTime> CreateDt = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_user_basic.modify_dt</code>.
     */
    public final TableField<WinUserBasicRecord, LocalDateTime> ModifyDt = createField(DSL.name("modify_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.inline("1000-01-01 00:00:00.000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_user_basic.delete_dt</code>.
     */
    public final TableField<WinUserBasicRecord, LocalDateTime> DeleteDt = createField(DSL.name("delete_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.inline("1000-01-01 00:00:00.000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_user_basic.commit_id</code>.
     */
    public final TableField<WinUserBasicRecord, Long> CommitId = createField(DSL.name("commit_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>win_user_basic.nickname</code>.
     */
    public final TableField<WinUserBasicRecord, String> Nickname = createField(DSL.name("nickname"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>win_user_basic.gender</code>.
     */
    public final TableField<WinUserBasicRecord, UserGender> Gender = createField(DSL.name("gender"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "", new JooqConsEnumConverter(pro.fessional.wings.warlock.enums.autogen.UserGender.class));

    /**
     * The column <code>win_user_basic.avatar</code>.
     */
    public final TableField<WinUserBasicRecord, String> Avatar = createField(DSL.name("avatar"), SQLDataType.VARCHAR(200).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>win_user_basic.locale</code>.
     */
    public final TableField<WinUserBasicRecord, java.util.Locale> Locale = createField(DSL.name("locale"), SQLDataType.CHAR(5).nullable(false).defaultValue(DSL.inline("zh_CN", SQLDataType.CHAR)), this, "", new JooqLocaleConverter());

    /**
     * The column <code>win_user_basic.zoneid</code>.
     */
    public final TableField<WinUserBasicRecord, ZoneId> Zoneid = createField(DSL.name("zoneid"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1010201", SQLDataType.INTEGER)), this, "", new JooqZoneIdConverter());

    /**
     * The column <code>win_user_basic.remark</code>.
     */
    public final TableField<WinUserBasicRecord, String> Remark = createField(DSL.name("remark"), SQLDataType.VARCHAR(500).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>win_user_basic.status</code>.
     */
    public final TableField<WinUserBasicRecord, UserStatus> Status = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "", new JooqConsEnumConverter(pro.fessional.wings.warlock.enums.autogen.UserStatus.class));

    private WinUserBasicTable(Name alias, Table<WinUserBasicRecord> aliased) {
        this(alias, aliased, null);
    }

    private WinUserBasicTable(Name alias, Table<WinUserBasicRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>win_user_basic</code> table reference
     */
    public WinUserBasicTable(String alias) {
        this(DSL.name(alias), WinUserBasic);
    }

    /**
     * Create an aliased <code>win_user_basic</code> table reference
     */
    public WinUserBasicTable(Name alias) {
        this(alias, WinUserBasic);
    }

    /**
     * Create a <code>win_user_basic</code> table reference
     */
    public WinUserBasicTable() {
        this(DSL.name("win_user_basic"), null);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<WinUserBasicRecord> getPrimaryKey() {
        return Internal.createUniqueKey(WinUserBasicTable.WinUserBasic, DSL.name("KEY_win_user_basic_PRIMARY"), new TableField[] { WinUserBasicTable.WinUserBasic.Id }, true);
    }

    @Override
    public List<UniqueKey<WinUserBasicRecord>> getKeys() {
        return Arrays.<UniqueKey<WinUserBasicRecord>>asList(
              Internal.createUniqueKey(WinUserBasicTable.WinUserBasic, DSL.name("KEY_win_user_basic_PRIMARY"), new TableField[] { WinUserBasicTable.WinUserBasic.Id }, true)
        );
    }

    @Override
    public WinUserBasicTable as(String alias) {
        return new WinUserBasicTable(DSL.name(alias), this);
    }

    @Override
    public WinUserBasicTable as(Name alias) {
        return new WinUserBasicTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WinUserBasicTable rename(String name) {
        return new WinUserBasicTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WinUserBasicTable rename(Name name) {
        return new WinUserBasicTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, LocalDateTime, LocalDateTime, LocalDateTime, Long, String, UserGender, String, java.util.Locale, ZoneId, String, UserStatus> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * LightIdAware seqName
     */
    @Override
    @NotNull
    public String getSeqName() {
            return "win_user_basic";
    }


    /**
     * alias L2
     */
    @Override
    @NotNull
    public WinUserBasicTable getAliasTable() {
            return asL2;
    }


    /**
     * The colDel <code>delete_dt</code> condition
     */
    public final Condition onlyDiedData = DeleteDt.gt(EmptyValue.DATE_TIME);
    public final Condition onlyLiveData = DeleteDt.eq(EmptyValue.DATE_TIME);

    @Override
    @NotNull
    public Condition getOnlyDied() {
            return onlyDiedData;
    }

    @Override
    @NotNull
    public Condition getOnlyLive() {
            return onlyLiveData;
    }

    @Override
    @NotNull
    public Map<Field<?>, ?> markDelete(JournalService.Journal commit) {
            Map<org.jooq.Field<?>, Object> map = new HashMap<>();
            map.put(DeleteDt, commit.getCommitDt());
            map.put(CommitId, commit.getCommitId());
            return map;
    }
}
