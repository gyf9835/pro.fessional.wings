/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.warlock.database.autogen.tables;


import org.jetbrains.annotations.NotNull;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import pro.fessional.wings.faceless.convention.EmptyValue;
import pro.fessional.wings.faceless.database.jooq.WingsJournalTable;
import pro.fessional.wings.faceless.service.journal.JournalService;
import pro.fessional.wings.warlock.database.autogen.DefaultSchema;
import pro.fessional.wings.warlock.database.autogen.tables.records.WinUserPermMapRecord;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * The table <code>wings_warlock.win_user_perm_map</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:2020102402"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WinUserPermMapTable extends TableImpl<WinUserPermMapRecord> implements WingsJournalTable<WinUserPermMapTable> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>win_user_perm_map</code>
     */
    public static final WinUserPermMapTable WinUserPermMap = new WinUserPermMapTable();
        public static final WinUserPermMapTable asL4 = WinUserPermMap.as("l4");

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WinUserPermMapRecord> getRecordType() {
        return WinUserPermMapRecord.class;
    }

    /**
     * The column <code>win_user_perm_map.refer_user</code>.
     */
    public final TableField<WinUserPermMapRecord, Long> ReferUser = createField(DSL.name("refer_user"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>win_user_perm_map.grant_perm</code>.
     */
    public final TableField<WinUserPermMapRecord, Long> GrantPerm = createField(DSL.name("grant_perm"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>win_user_perm_map.create_dt</code>.
     */
    public final TableField<WinUserPermMapRecord, LocalDateTime> CreateDt = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_user_perm_map.modify_dt</code>.
     */
    public final TableField<WinUserPermMapRecord, LocalDateTime> ModifyDt = createField(DSL.name("modify_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.inline("1000-01-01 00:00:00.000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_user_perm_map.delete_dt</code>.
     */
    public final TableField<WinUserPermMapRecord, LocalDateTime> DeleteDt = createField(DSL.name("delete_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.inline("1000-01-01 00:00:00.000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_user_perm_map.commit_id</code>.
     */
    public final TableField<WinUserPermMapRecord, Long> CommitId = createField(DSL.name("commit_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private WinUserPermMapTable(Name alias, Table<WinUserPermMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private WinUserPermMapTable(Name alias, Table<WinUserPermMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>win_user_perm_map</code> table reference
     */
    public WinUserPermMapTable(String alias) {
        this(DSL.name(alias), WinUserPermMap);
    }

    /**
     * Create an aliased <code>win_user_perm_map</code> table reference
     */
    public WinUserPermMapTable(Name alias) {
        this(alias, WinUserPermMap);
    }

    /**
     * Create a <code>win_user_perm_map</code> table reference
     */
    public WinUserPermMapTable() {
        this(DSL.name("win_user_perm_map"), null);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<WinUserPermMapRecord> getPrimaryKey() {
        return Internal.createUniqueKey(WinUserPermMapTable.WinUserPermMap, DSL.name("KEY_win_user_perm_map_PRIMARY"), new TableField[] { WinUserPermMapTable.WinUserPermMap.ReferUser, WinUserPermMapTable.WinUserPermMap.GrantPerm }, true);
    }

    @Override
    public List<UniqueKey<WinUserPermMapRecord>> getKeys() {
        return Arrays.<UniqueKey<WinUserPermMapRecord>>asList(
              Internal.createUniqueKey(WinUserPermMapTable.WinUserPermMap, DSL.name("KEY_win_user_perm_map_PRIMARY"), new TableField[] { WinUserPermMapTable.WinUserPermMap.ReferUser, WinUserPermMapTable.WinUserPermMap.GrantPerm }, true)
        );
    }

    @Override
    public WinUserPermMapTable as(String alias) {
        return new WinUserPermMapTable(DSL.name(alias), this);
    }

    @Override
    public WinUserPermMapTable as(Name alias) {
        return new WinUserPermMapTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WinUserPermMapTable rename(String name) {
        return new WinUserPermMapTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WinUserPermMapTable rename(Name name) {
        return new WinUserPermMapTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, LocalDateTime, LocalDateTime, LocalDateTime, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }


    /**
     * alias L4
     */
    @Override
    @NotNull
    public WinUserPermMapTable getAliasTable() {
            return asL4;
    }


    /**
     * The colDel <code>delete_dt</code> condition
     */
    public final Condition onlyDiedData = DeleteDt.gt(EmptyValue.DATE_TIME);
    public final Condition onlyLiveData = DeleteDt.eq(EmptyValue.DATE_TIME);

    @Override
    @NotNull
    public Condition getOnlyDied() {
            return onlyDiedData;
    }

    @Override
    @NotNull
    public Condition getOnlyLive() {
            return onlyLiveData;
    }

    @Override
    @NotNull
    public Map<Field<?>, ?> markDelete(JournalService.Journal commit) {
            Map<org.jooq.Field<?>, Object> map = new HashMap<>();
            map.put(DeleteDt, commit.getCommitDt());
            map.put(CommitId, commit.getCommitId());
            return map;
    }
}
