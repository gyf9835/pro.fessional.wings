/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.warlock.database.autogen.tables.daos;


import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import pro.fessional.wings.faceless.database.jooq.WingsJooqDaoImpl;
import pro.fessional.wings.faceless.enums.autogen.StandardLanguage;
import pro.fessional.wings.faceless.enums.autogen.StandardTimezone;
import pro.fessional.wings.warlock.database.autogen.tables.WinUserBasicTable;
import pro.fessional.wings.warlock.database.autogen.tables.pojos.WinUserBasic;
import pro.fessional.wings.warlock.database.autogen.tables.records.WinUserBasicRecord;
import pro.fessional.wings.warlock.enums.autogen.UserGender;
import pro.fessional.wings.warlock.enums.autogen.UserStatus;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.List;


/**
 * The table <code>wings_warlock.win_user_basic</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:2020102401"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class WinUserBasicDao extends WingsJooqDaoImpl<WinUserBasicTable, WinUserBasicRecord, WinUserBasic, Long> {

    /**
     * Create a new WinUserBasicDao without any configuration
     */
    public WinUserBasicDao() {
        super(WinUserBasicTable.WinUserBasic, WinUserBasic.class);
    }

    /**
     * Create a new WinUserBasicDao with an attached configuration
     */
    @Autowired
    public WinUserBasicDao(Configuration configuration) {
        super(WinUserBasicTable.WinUserBasic, WinUserBasic.class, configuration);
    }

    @Override
    public Long getId(WinUserBasic object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserBasic> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinUserBasicTable.WinUserBasic.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WinUserBasic> fetchById(Long... values) {
        return fetch(WinUserBasicTable.WinUserBasic.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WinUserBasic fetchOneById(Long value) {
        return fetchOne(WinUserBasicTable.WinUserBasic.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserBasic> fetchRangeOfCreateDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserBasicTable.WinUserBasic.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<WinUserBasic> fetchByCreateDt(LocalDateTime... values) {
        return fetch(WinUserBasicTable.WinUserBasic.CreateDt, values);
    }

    /**
     * Fetch records that have <code>modify_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserBasic> fetchRangeOfModifyDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserBasicTable.WinUserBasic.ModifyDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_dt IN (values)</code>
     */
    public List<WinUserBasic> fetchByModifyDt(LocalDateTime... values) {
        return fetch(WinUserBasicTable.WinUserBasic.ModifyDt, values);
    }

    /**
     * Fetch records that have <code>delete_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserBasic> fetchRangeOfDeleteDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserBasicTable.WinUserBasic.DeleteDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_dt IN (values)</code>
     */
    public List<WinUserBasic> fetchByDeleteDt(LocalDateTime... values) {
        return fetch(WinUserBasicTable.WinUserBasic.DeleteDt, values);
    }

    /**
     * Fetch records that have <code>commit_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserBasic> fetchRangeOfCommitId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinUserBasicTable.WinUserBasic.CommitId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>commit_id IN (values)</code>
     */
    public List<WinUserBasic> fetchByCommitId(Long... values) {
        return fetch(WinUserBasicTable.WinUserBasic.CommitId, values);
    }

    /**
     * Fetch records that have <code>nick_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserBasic> fetchRangeOfNickName(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserBasicTable.WinUserBasic.NickName, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nick_name IN (values)</code>
     */
    public List<WinUserBasic> fetchByNickName(String... values) {
        return fetch(WinUserBasicTable.WinUserBasic.NickName, values);
    }

    /**
     * Fetch records that have <code>gender BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserBasic> fetchRangeOfGender(UserGender lowerInclusive, UserGender upperInclusive) {
        return fetchRange(WinUserBasicTable.WinUserBasic.Gender, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gender IN (values)</code>
     */
    public List<WinUserBasic> fetchByGender(UserGender... values) {
        return fetch(WinUserBasicTable.WinUserBasic.Gender, values);
    }

    /**
     * Fetch records that have <code>avatar BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserBasic> fetchRangeOfAvatar(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserBasicTable.WinUserBasic.Avatar, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>avatar IN (values)</code>
     */
    public List<WinUserBasic> fetchByAvatar(String... values) {
        return fetch(WinUserBasicTable.WinUserBasic.Avatar, values);
    }

    /**
     * Fetch records that have <code>language BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserBasic> fetchRangeOfLanguage(StandardLanguage lowerInclusive, StandardLanguage upperInclusive) {
        return fetchRange(WinUserBasicTable.WinUserBasic.Language, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>language IN (values)</code>
     */
    public List<WinUserBasic> fetchByLanguage(StandardLanguage... values) {
        return fetch(WinUserBasicTable.WinUserBasic.Language, values);
    }

    /**
     * Fetch records that have <code>timezone BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserBasic> fetchRangeOfTimezone(StandardTimezone lowerInclusive, StandardTimezone upperInclusive) {
        return fetchRange(WinUserBasicTable.WinUserBasic.Timezone, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timezone IN (values)</code>
     */
    public List<WinUserBasic> fetchByTimezone(StandardTimezone... values) {
        return fetch(WinUserBasicTable.WinUserBasic.Timezone, values);
    }

    /**
     * Fetch records that have <code>remark BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserBasic> fetchRangeOfRemark(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserBasicTable.WinUserBasic.Remark, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>remark IN (values)</code>
     */
    public List<WinUserBasic> fetchByRemark(String... values) {
        return fetch(WinUserBasicTable.WinUserBasic.Remark, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserBasic> fetchRangeOfStatus(UserStatus lowerInclusive, UserStatus upperInclusive) {
        return fetchRange(WinUserBasicTable.WinUserBasic.Status, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<WinUserBasic> fetchByStatus(UserStatus... values) {
        return fetch(WinUserBasicTable.WinUserBasic.Status, values);
    }
}
