/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.warlock.database.autogen.tables.daos;


import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import pro.fessional.wings.faceless.database.jooq.WingsJooqDaoImpl;
import pro.fessional.wings.warlock.database.autogen.tables.WinUserAnthnTable;
import pro.fessional.wings.warlock.database.autogen.tables.pojos.WinUserAnthn;
import pro.fessional.wings.warlock.database.autogen.tables.records.WinUserAnthnRecord;
import pro.fessional.wings.warlock.enums.autogen.UserStatus;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.List;


/**
 * The table <code>wings_warlock.win_user_anthn</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:2020102401"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class WinUserAnthnDao extends WingsJooqDaoImpl<WinUserAnthnTable, WinUserAnthnRecord, WinUserAnthn, Long> {

    /**
     * Create a new WinUserAnthnDao without any configuration
     */
    public WinUserAnthnDao() {
        super(WinUserAnthnTable.WinUserAnthn, WinUserAnthn.class);
    }

    /**
     * Create a new WinUserAnthnDao with an attached configuration
     */
    @Autowired
    public WinUserAnthnDao(Configuration configuration) {
        super(WinUserAnthnTable.WinUserAnthn, WinUserAnthn.class, configuration);
    }

    @Override
    public Long getId(WinUserAnthn object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WinUserAnthn> fetchById(Long... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WinUserAnthn fetchOneById(Long value) {
        return fetchOne(WinUserAnthnTable.WinUserAnthn.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfCreateDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<WinUserAnthn> fetchByCreateDt(LocalDateTime... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.CreateDt, values);
    }

    /**
     * Fetch records that have <code>modify_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfModifyDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.ModifyDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_dt IN (values)</code>
     */
    public List<WinUserAnthn> fetchByModifyDt(LocalDateTime... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.ModifyDt, values);
    }

    /**
     * Fetch records that have <code>delete_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfDeleteDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.DeleteDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_dt IN (values)</code>
     */
    public List<WinUserAnthn> fetchByDeleteDt(LocalDateTime... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.DeleteDt, values);
    }

    /**
     * Fetch records that have <code>commit_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfCommitId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.CommitId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>commit_id IN (values)</code>
     */
    public List<WinUserAnthn> fetchByCommitId(Long... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.CommitId, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.UserId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<WinUserAnthn> fetchByUserId(Long... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.UserId, values);
    }

    /**
     * Fetch records that have <code>auth_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfAuthType(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.AuthType, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth_type IN (values)</code>
     */
    public List<WinUserAnthn> fetchByAuthType(String... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.AuthType, values);
    }

    /**
     * Fetch records that have <code>auth_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfAuthName(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.AuthName, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth_name IN (values)</code>
     */
    public List<WinUserAnthn> fetchByAuthName(String... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.AuthName, values);
    }

    /**
     * Fetch records that have <code>auth_pass BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfAuthPass(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.AuthPass, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth_pass IN (values)</code>
     */
    public List<WinUserAnthn> fetchByAuthPass(String... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.AuthPass, values);
    }

    /**
     * Fetch records that have <code>auth_salt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfAuthSalt(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.AuthSalt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth_salt IN (values)</code>
     */
    public List<WinUserAnthn> fetchByAuthSalt(String... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.AuthSalt, values);
    }

    /**
     * Fetch records that have <code>auth_para1 BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfAuthPara1(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.AuthPara1, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth_para1 IN (values)</code>
     */
    public List<WinUserAnthn> fetchByAuthPara1(String... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.AuthPara1, values);
    }

    /**
     * Fetch records that have <code>auth_para2 BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfAuthPara2(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.AuthPara2, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth_para2 IN (values)</code>
     */
    public List<WinUserAnthn> fetchByAuthPara2(String... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.AuthPara2, values);
    }

    /**
     * Fetch records that have <code>auth_token BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfAuthToken(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.AuthToken, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth_token IN (values)</code>
     */
    public List<WinUserAnthn> fetchByAuthToken(String... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.AuthToken, values);
    }

    /**
     * Fetch records that have <code>expired_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfExpiredDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.ExpiredDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>expired_dt IN (values)</code>
     */
    public List<WinUserAnthn> fetchByExpiredDt(LocalDateTime... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.ExpiredDt, values);
    }

    /**
     * Fetch records that have <code>error_cnt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfErrorCnt(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.ErrorCnt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>error_cnt IN (values)</code>
     */
    public List<WinUserAnthn> fetchByErrorCnt(Integer... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.ErrorCnt, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserAnthn> fetchRangeOfStatus(UserStatus lowerInclusive, UserStatus upperInclusive) {
        return fetchRange(WinUserAnthnTable.WinUserAnthn.Status, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<WinUserAnthn> fetchByStatus(UserStatus... values) {
        return fetch(WinUserAnthnTable.WinUserAnthn.Status, values);
    }
}
