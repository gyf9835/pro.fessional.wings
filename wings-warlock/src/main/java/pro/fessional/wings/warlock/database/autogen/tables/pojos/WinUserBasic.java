/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.warlock.database.autogen.tables.pojos;


import pro.fessional.wings.faceless.enums.autogen.StandardLanguage;
import pro.fessional.wings.faceless.enums.autogen.StandardTimezone;
import pro.fessional.wings.warlock.database.autogen.tables.interfaces.IWinUserBasic;
import pro.fessional.wings.warlock.enums.autogen.UserGender;
import pro.fessional.wings.warlock.enums.autogen.UserStatus;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.time.LocalDateTime;


/**
 * The table <code>wings_warlock.win_user_basic</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:2020102401"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "win_user_basic",
    uniqueConstraints = {
        @UniqueConstraint(name = "KEY_win_user_basic_PRIMARY", columnNames = { "id" })
    }
)
public class WinUserBasic implements IWinUserBasic {

    private static final long serialVersionUID = 1L;

    private Long             id;
    private LocalDateTime    createDt;
    private LocalDateTime    modifyDt;
    private LocalDateTime    deleteDt;
    private Long             commitId;
    private String           nickName;
    private UserGender       gender;
    private String           avatar;
    private StandardLanguage language;
    private StandardTimezone timezone;
    private String           remark;
    private UserStatus       status;

    public WinUserBasic() {}

    public WinUserBasic(IWinUserBasic value) {
        this.id = value.getId();
        this.createDt = value.getCreateDt();
        this.modifyDt = value.getModifyDt();
        this.deleteDt = value.getDeleteDt();
        this.commitId = value.getCommitId();
        this.nickName = value.getNickName();
        this.gender = value.getGender();
        this.avatar = value.getAvatar();
        this.language = value.getLanguage();
        this.timezone = value.getTimezone();
        this.remark = value.getRemark();
        this.status = value.getStatus();
    }

    public WinUserBasic(
        Long             id,
        LocalDateTime    createDt,
        LocalDateTime    modifyDt,
        LocalDateTime    deleteDt,
        Long             commitId,
        String           nickName,
        UserGender       gender,
        String           avatar,
        StandardLanguage language,
        StandardTimezone timezone,
        String           remark,
        UserStatus       status
    ) {
        this.id = id;
        this.createDt = createDt;
        this.modifyDt = modifyDt;
        this.deleteDt = deleteDt;
        this.commitId = commitId;
        this.nickName = nickName;
        this.gender = gender;
        this.avatar = avatar;
        this.language = language;
        this.timezone = timezone;
        this.remark = remark;
        this.status = status;
    }

    /**
     * Getter for <code>win_user_basic.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false, precision = 19)
    @NotNull
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>win_user_basic.id</code>.
     */
    @Override
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>win_user_basic.create_dt</code>.
     */
    @Column(name = "create_dt", nullable = false, precision = 3)
    @Override
    public LocalDateTime getCreateDt() {
        return this.createDt;
    }

    /**
     * Setter for <code>win_user_basic.create_dt</code>.
     */
    @Override
    public void setCreateDt(LocalDateTime createDt) {
        this.createDt = createDt;
    }

    /**
     * Getter for <code>win_user_basic.modify_dt</code>.
     */
    @Column(name = "modify_dt", nullable = false, precision = 3)
    @Override
    public LocalDateTime getModifyDt() {
        return this.modifyDt;
    }

    /**
     * Setter for <code>win_user_basic.modify_dt</code>.
     */
    @Override
    public void setModifyDt(LocalDateTime modifyDt) {
        this.modifyDt = modifyDt;
    }

    /**
     * Getter for <code>win_user_basic.delete_dt</code>.
     */
    @Column(name = "delete_dt", nullable = false, precision = 3)
    @Override
    public LocalDateTime getDeleteDt() {
        return this.deleteDt;
    }

    /**
     * Setter for <code>win_user_basic.delete_dt</code>.
     */
    @Override
    public void setDeleteDt(LocalDateTime deleteDt) {
        this.deleteDt = deleteDt;
    }

    /**
     * Getter for <code>win_user_basic.commit_id</code>.
     */
    @Column(name = "commit_id", nullable = false, precision = 19)
    @NotNull
    @Override
    public Long getCommitId() {
        return this.commitId;
    }

    /**
     * Setter for <code>win_user_basic.commit_id</code>.
     */
    @Override
    public void setCommitId(Long commitId) {
        this.commitId = commitId;
    }

    /**
     * Getter for <code>win_user_basic.nick_name</code>.
     */
    @Column(name = "nick_name", nullable = false, length = 50)
    @Size(max = 50)
    @Override
    public String getNickName() {
        return this.nickName;
    }

    /**
     * Setter for <code>win_user_basic.nick_name</code>.
     */
    @Override
    public void setNickName(String nickName) {
        this.nickName = nickName;
    }

    /**
     * Getter for <code>win_user_basic.gender</code>.
     */
    @Column(name = "gender", nullable = false, precision = 10)
    @Override
    public UserGender getGender() {
        return this.gender;
    }

    /**
     * Setter for <code>win_user_basic.gender</code>.
     */
    @Override
    public void setGender(UserGender gender) {
        this.gender = gender;
    }

    /**
     * Getter for <code>win_user_basic.avatar</code>.
     */
    @Column(name = "avatar", nullable = false, length = 200)
    @Size(max = 200)
    @Override
    public String getAvatar() {
        return this.avatar;
    }

    /**
     * Setter for <code>win_user_basic.avatar</code>.
     */
    @Override
    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    /**
     * Getter for <code>win_user_basic.language</code>.
     */
    @Column(name = "language", nullable = false, length = 5)
    @Override
    public StandardLanguage getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>win_user_basic.language</code>.
     */
    @Override
    public void setLanguage(StandardLanguage language) {
        this.language = language;
    }

    /**
     * Getter for <code>win_user_basic.timezone</code>.
     */
    @Column(name = "timezone", nullable = false, precision = 10)
    @Override
    public StandardTimezone getTimezone() {
        return this.timezone;
    }

    /**
     * Setter for <code>win_user_basic.timezone</code>.
     */
    @Override
    public void setTimezone(StandardTimezone timezone) {
        this.timezone = timezone;
    }

    /**
     * Getter for <code>win_user_basic.remark</code>.
     */
    @Column(name = "remark", nullable = false, length = 500)
    @Size(max = 500)
    @Override
    public String getRemark() {
        return this.remark;
    }

    /**
     * Setter for <code>win_user_basic.remark</code>.
     */
    @Override
    public void setRemark(String remark) {
        this.remark = remark;
    }

    /**
     * Getter for <code>win_user_basic.status</code>.
     */
    @Column(name = "status", nullable = false, precision = 10)
    @Override
    public UserStatus getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>win_user_basic.status</code>.
     */
    @Override
    public void setStatus(UserStatus status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final WinUserBasic other = (WinUserBasic) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (createDt == null) {
            if (other.createDt != null)
                return false;
        }
        else if (!createDt.equals(other.createDt))
            return false;
        if (modifyDt == null) {
            if (other.modifyDt != null)
                return false;
        }
        else if (!modifyDt.equals(other.modifyDt))
            return false;
        if (deleteDt == null) {
            if (other.deleteDt != null)
                return false;
        }
        else if (!deleteDt.equals(other.deleteDt))
            return false;
        if (commitId == null) {
            if (other.commitId != null)
                return false;
        }
        else if (!commitId.equals(other.commitId))
            return false;
        if (nickName == null) {
            if (other.nickName != null)
                return false;
        }
        else if (!nickName.equals(other.nickName))
            return false;
        if (gender == null) {
            if (other.gender != null)
                return false;
        }
        else if (!gender.equals(other.gender))
            return false;
        if (avatar == null) {
            if (other.avatar != null)
                return false;
        }
        else if (!avatar.equals(other.avatar))
            return false;
        if (language == null) {
            if (other.language != null)
                return false;
        }
        else if (!language.equals(other.language))
            return false;
        if (timezone == null) {
            if (other.timezone != null)
                return false;
        }
        else if (!timezone.equals(other.timezone))
            return false;
        if (remark == null) {
            if (other.remark != null)
                return false;
        }
        else if (!remark.equals(other.remark))
            return false;
        if (status == null) {
            if (other.status != null)
                return false;
        }
        else if (!status.equals(other.status))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createDt == null) ? 0 : this.createDt.hashCode());
        result = prime * result + ((this.modifyDt == null) ? 0 : this.modifyDt.hashCode());
        result = prime * result + ((this.deleteDt == null) ? 0 : this.deleteDt.hashCode());
        result = prime * result + ((this.commitId == null) ? 0 : this.commitId.hashCode());
        result = prime * result + ((this.nickName == null) ? 0 : this.nickName.hashCode());
        result = prime * result + ((this.gender == null) ? 0 : this.gender.hashCode());
        result = prime * result + ((this.avatar == null) ? 0 : this.avatar.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.timezone == null) ? 0 : this.timezone.hashCode());
        result = prime * result + ((this.remark == null) ? 0 : this.remark.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("WinUserBasic (");

        sb.append(id);
        sb.append(", ").append(createDt);
        sb.append(", ").append(modifyDt);
        sb.append(", ").append(deleteDt);
        sb.append(", ").append(commitId);
        sb.append(", ").append(nickName);
        sb.append(", ").append(gender);
        sb.append(", ").append(avatar);
        sb.append(", ").append(language);
        sb.append(", ").append(timezone);
        sb.append(", ").append(remark);
        sb.append(", ").append(status);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWinUserBasic from) {
        setId(from.getId());
        setCreateDt(from.getCreateDt());
        setModifyDt(from.getModifyDt());
        setDeleteDt(from.getDeleteDt());
        setCommitId(from.getCommitId());
        setNickName(from.getNickName());
        setGender(from.getGender());
        setAvatar(from.getAvatar());
        setLanguage(from.getLanguage());
        setTimezone(from.getTimezone());
        setRemark(from.getRemark());
        setStatus(from.getStatus());
    }

    @Override
    public <E extends IWinUserBasic> E into(E into) {
        into.from(this);
        return into;
    }
}
