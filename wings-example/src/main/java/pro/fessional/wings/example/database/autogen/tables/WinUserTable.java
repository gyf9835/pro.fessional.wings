/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.example.database.autogen.tables;


import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import pro.fessional.wings.example.database.autogen.DefaultSchema;
import pro.fessional.wings.example.database.autogen.tables.records.WinUserRecord;
import pro.fessional.wings.faceless.convention.EmptyValue;
import pro.fessional.wings.faceless.database.jooq.WingsAliasTable;
import pro.fessional.wings.faceless.service.lightid.LightIdAware;

import javax.annotation.Generated;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * The table <code>wings_example.win_user</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.3",
        "schema version:2019070403"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WinUserTable extends TableImpl<WinUserRecord> implements WingsAliasTable<WinUserTable>, LightIdAware {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>win_user</code>
     */
    public static final WinUserTable WinUser = new WinUserTable();
        public static final WinUserTable asZ7 = WinUser.as("z7");

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WinUserRecord> getRecordType() {
        return WinUserRecord.class;
    }

    /**
     * The column <code>win_user.id</code>.
     */
    public final TableField<WinUserRecord, Long> Id = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>win_user.create_dt</code>.
     */
    public final TableField<WinUserRecord, LocalDateTime> CreateDt = createField(DSL.name("create_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(3)", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_user.modify_dt</code>.
     */
    public final TableField<WinUserRecord, LocalDateTime> ModifyDt = createField(DSL.name("modify_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.inline("1000-01-01 00:00:00.000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_user.delete_dt</code>.
     */
    public final TableField<WinUserRecord, LocalDateTime> DeleteDt = createField(DSL.name("delete_dt"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.inline("1000-01-01 00:00:00.000", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>win_user.commit_id</code>.
     */
    public final TableField<WinUserRecord, Long> CommitId = createField(DSL.name("commit_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>win_user.name</code>.
     */
    public final TableField<WinUserRecord, String> Name = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>win_user.gender</code>.
     */
    public final TableField<WinUserRecord, Integer> Gender = createField(DSL.name("gender"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>win_user.birth</code>.
     */
    public final TableField<WinUserRecord, LocalDate> Birth = createField(DSL.name("birth"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>win_user.avatar</code>.
     */
    public final TableField<WinUserRecord, String> Avatar = createField(DSL.name("avatar"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>win_user.country</code>.
     */
    public final TableField<WinUserRecord, String> Country = createField(DSL.name("country"), SQLDataType.CHAR(2).nullable(false), this, "");

    /**
     * The column <code>win_user.language</code>.
     */
    public final TableField<WinUserRecord, String> Language = createField(DSL.name("language"), SQLDataType.CHAR(5).nullable(false), this, "");

    /**
     * The column <code>win_user.timezone</code>.
     */
    public final TableField<WinUserRecord, Integer> Timezone = createField(DSL.name("timezone"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>win_user.auth_set</code>.
     */
    public final TableField<WinUserRecord, String> AuthSet = createField(DSL.name("auth_set"), SQLDataType.VARCHAR(2000).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>win_user.role_set</code>.
     */
    public final TableField<WinUserRecord, String> RoleSet = createField(DSL.name("role_set"), SQLDataType.VARCHAR(1000).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>win_user.status</code>.
     */
    public final TableField<WinUserRecord, Integer> Status = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false), this, "");

    private WinUserTable(org.jooq.Name alias, Table<WinUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private WinUserTable(org.jooq.Name alias, Table<WinUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>win_user</code> table reference
     */
    public WinUserTable(String alias) {
        this(DSL.name(alias), WinUser);
    }

    /**
     * Create an aliased <code>win_user</code> table reference
     */
    public WinUserTable(org.jooq.Name alias) {
        this(alias, WinUser);
    }

    /**
     * Create a <code>win_user</code> table reference
     */
    public WinUserTable() {
        this(DSL.name("win_user"), null);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<WinUserRecord> getPrimaryKey() {
        return Internal.createUniqueKey(WinUserTable.WinUser, DSL.name("KEY_win_user_PRIMARY"), new TableField[] { WinUserTable.WinUser.Id }, true);
    }

    @Override
    public List<UniqueKey<WinUserRecord>> getKeys() {
        return Arrays.<UniqueKey<WinUserRecord>>asList(
              Internal.createUniqueKey(WinUserTable.WinUser, DSL.name("KEY_win_user_PRIMARY"), new TableField[] { WinUserTable.WinUser.Id }, true)
        );
    }

    @Override
    public WinUserTable as(String alias) {
        return new WinUserTable(DSL.name(alias), this);
    }

    @Override
    public WinUserTable as(org.jooq.Name alias) {
        return new WinUserTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WinUserTable rename(String name) {
        return new WinUserTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WinUserTable rename(org.jooq.Name name) {
        return new WinUserTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, LocalDateTime, LocalDateTime, LocalDateTime, Long, String, Integer, LocalDate, String, String, String, Integer, String, String, Integer> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * alias Z7
     */
    @Override
    public WinUserTable getAliasTable() {
            return asZ7;
    }

    /**
     * The column <code>delete_dt</code> condition
     */
    public final Condition onlyDiedData = DeleteDt.gt(EmptyValue.DATE_TIME);
    public final Condition onlyLiveData = DeleteDt.eq(EmptyValue.DATE_TIME);
    @Override
    public Condition getOnlyDied() {
            return onlyDiedData;
    }
    @Override
    public Condition getOnlyLive() {
            return onlyLiveData;
    }
}
