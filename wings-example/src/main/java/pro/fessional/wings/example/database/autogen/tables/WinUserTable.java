/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.example.database.autogen.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import pro.fessional.wings.example.database.autogen.DefaultSchema;
import pro.fessional.wings.example.database.autogen.tables.records.WinUserRecord;
import pro.fessional.wings.faceless.convention.EmptyValue;
import pro.fessional.wings.faceless.service.lightid.LightIdAware;


/**
 * The table <code>wings_0.win_user</code>.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4",
        "schema version:2019070403"
    },
    date = "2020-06-17T11:00:12.242Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WinUserTable extends TableImpl<WinUserRecord> implements LightIdAware {

    private static final long serialVersionUID = 1131736677;

    /**
     * The reference instance of <code>win_user</code>
     */
    public static final WinUserTable WinUser = new WinUserTable();
    public static final WinUserTable asZ7 = WinUser.as("z7");

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WinUserRecord> getRecordType() {
        return WinUserRecord.class;
    }

    /**
     * The column <code>win_user.id</code>.
     */
    public final TableField<WinUserRecord, Long> Id = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>win_user.create_dt</code>.
     */
    public final TableField<WinUserRecord, LocalDateTime> CreateDt = createField(DSL.name("create_dt"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP(3)", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建日时(系统)");

    /**
     * The column <code>win_user.modify_dt</code>.
     */
    public final TableField<WinUserRecord, LocalDateTime> ModifyDt = createField(DSL.name("modify_dt"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1000-01-01 00:00:00.000", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "修改日时(系统)");

    /**
     * The column <code>win_user.delete_dt</code>.
     */
    public final TableField<WinUserRecord, LocalDateTime> DeleteDt = createField(DSL.name("delete_dt"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1000-01-01 00:00:00.000", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "标记删除");

    /**
     * The column <code>win_user.commit_id</code>.
     */
    public final TableField<WinUserRecord, Long> CommitId = createField(DSL.name("commit_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "提交id");

    /**
     * The column <code>win_user.name</code>.
     */
    public final TableField<WinUserRecord, String> Name = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "名字");

    /**
     * The column <code>win_user.gender</code>.
     */
    public final TableField<WinUserRecord, Integer> Gender = createField(DSL.name("gender"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "性别/20101##");

    /**
     * The column <code>win_user.birth</code>.
     */
    public final TableField<WinUserRecord, LocalDate> Birth = createField(DSL.name("birth"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "生日");

    /**
     * The column <code>win_user.avatar</code>.
     */
    public final TableField<WinUserRecord, String> Avatar = createField(DSL.name("avatar"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "头像");

    /**
     * The column <code>win_user.country</code>.
     */
    public final TableField<WinUserRecord, String> Country = createField(DSL.name("country"), org.jooq.impl.SQLDataType.CHAR(2).nullable(false), this, "国家/地区");

    /**
     * The column <code>win_user.language</code>.
     */
    public final TableField<WinUserRecord, String> Language = createField(DSL.name("language"), org.jooq.impl.SQLDataType.CHAR(5).nullable(false), this, "使用语言");

    /**
     * The column <code>win_user.timezone</code>.
     */
    public final TableField<WinUserRecord, Integer> Timezone = createField(DSL.name("timezone"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "所在时区");

    /**
     * The column <code>win_user.auth_set</code>.
     */
    public final TableField<WinUserRecord, String> AuthSet = createField(DSL.name("auth_set"), org.jooq.impl.SQLDataType.VARCHAR(2000).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "权限集:authority#401####，逗号分割");

    /**
     * The column <code>win_user.role_set</code>.
     */
    public final TableField<WinUserRecord, String> RoleSet = createField(DSL.name("role_set"), org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "角色集:win_auth_role.id，逗号分割");

    /**
     * The column <code>win_user.status</code>.
     */
    public final TableField<WinUserRecord, Integer> Status = createField(DSL.name("status"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户状态/41101##");

    /**
     * Create a <code>win_user</code> table reference
     */
    public WinUserTable() {
        this(DSL.name("win_user"), null);
    }

    /**
     * Create an aliased <code>win_user</code> table reference
     */
    public WinUserTable(String alias) {
        this(DSL.name(alias), WinUser);
    }

    /**
     * Create an aliased <code>win_user</code> table reference
     */
    public WinUserTable(Name alias) {
        this(alias, WinUser);
    }

    private WinUserTable(Name alias, Table<WinUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private WinUserTable(Name alias, Table<WinUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("411/用户"));
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<WinUserRecord> getPrimaryKey() {
        return Internal.createUniqueKey(pro.fessional.wings.example.database.autogen.tables.WinUserTable.WinUser, "KEY_win_user_PRIMARY", pro.fessional.wings.example.database.autogen.tables.WinUserTable.WinUser.Id);
    }

    @Override
    public List<UniqueKey<WinUserRecord>> getKeys() {
        return Arrays.<UniqueKey<WinUserRecord>>asList(
              Internal.createUniqueKey(pro.fessional.wings.example.database.autogen.tables.WinUserTable.WinUser, "KEY_win_user_PRIMARY", pro.fessional.wings.example.database.autogen.tables.WinUserTable.WinUser.Id)
        );
    }

    @Override
    public WinUserTable as(String alias) {
        return new WinUserTable(DSL.name(alias), this);
    }

    @Override
    public WinUserTable as(Name alias) {
        return new WinUserTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WinUserTable rename(String name) {
        return new WinUserTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WinUserTable rename(Name name) {
        return new WinUserTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, LocalDateTime, LocalDateTime, LocalDateTime, Long, String, Integer, LocalDate, String, String, String, Integer, String, String, Integer> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * The column <code>delete_dt</code> condition
     */
    public final Condition onlyDiedData = DeleteDt.gt(EmptyValue.DATE_TIME);
    public final Condition onlyLiveData = DeleteDt.eq(EmptyValue.DATE_TIME);
}
