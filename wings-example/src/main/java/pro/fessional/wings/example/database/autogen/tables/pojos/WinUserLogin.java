/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.example.database.autogen.tables.pojos;


import pro.fessional.wings.example.database.autogen.tables.interfaces.IWinUserLogin;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.time.LocalDateTime;


/**
 * The table <code>wings_example.win_user_login</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.3",
        "schema version:2019070403"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "win_user_login",
    uniqueConstraints = {
        @UniqueConstraint(name = "KEY_win_user_login_PRIMARY", columnNames = { "id" })
    }
)
public class WinUserLogin implements IWinUserLogin {

    private static final long serialVersionUID = 1L;

    private Long          id;
    private LocalDateTime createDt;
    private LocalDateTime modifyDt;
    private LocalDateTime deleteDt;
    private Long          commitId;
    private Long          userId;
    private Integer       loginType;
    private String        loginName;
    private String        loginPass;
    private String        loginSalt;
    private String        loginPara;
    private String        authCode;
    private Integer       badCount;
    private Integer       status;

    public WinUserLogin() {}

    public WinUserLogin(IWinUserLogin value) {
        this.id = value.getId();
        this.createDt = value.getCreateDt();
        this.modifyDt = value.getModifyDt();
        this.deleteDt = value.getDeleteDt();
        this.commitId = value.getCommitId();
        this.userId = value.getUserId();
        this.loginType = value.getLoginType();
        this.loginName = value.getLoginName();
        this.loginPass = value.getLoginPass();
        this.loginSalt = value.getLoginSalt();
        this.loginPara = value.getLoginPara();
        this.authCode = value.getAuthCode();
        this.badCount = value.getBadCount();
        this.status = value.getStatus();
    }

    public WinUserLogin(
        Long          id,
        LocalDateTime createDt,
        LocalDateTime modifyDt,
        LocalDateTime deleteDt,
        Long          commitId,
        Long          userId,
        Integer       loginType,
        String        loginName,
        String        loginPass,
        String        loginSalt,
        String        loginPara,
        String        authCode,
        Integer       badCount,
        Integer       status
    ) {
        this.id = id;
        this.createDt = createDt;
        this.modifyDt = modifyDt;
        this.deleteDt = deleteDt;
        this.commitId = commitId;
        this.userId = userId;
        this.loginType = loginType;
        this.loginName = loginName;
        this.loginPass = loginPass;
        this.loginSalt = loginSalt;
        this.loginPara = loginPara;
        this.authCode = authCode;
        this.badCount = badCount;
        this.status = status;
    }

    /**
     * Getter for <code>win_user_login.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false, precision = 19)
    @NotNull
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>win_user_login.id</code>.
     */
    @Override
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>win_user_login.create_dt</code>.
     */
    @Column(name = "create_dt", nullable = false, precision = 3)
    @Override
    public LocalDateTime getCreateDt() {
        return this.createDt;
    }

    /**
     * Setter for <code>win_user_login.create_dt</code>.
     */
    @Override
    public void setCreateDt(LocalDateTime createDt) {
        this.createDt = createDt;
    }

    /**
     * Getter for <code>win_user_login.modify_dt</code>.
     */
    @Column(name = "modify_dt", nullable = false, precision = 3)
    @Override
    public LocalDateTime getModifyDt() {
        return this.modifyDt;
    }

    /**
     * Setter for <code>win_user_login.modify_dt</code>.
     */
    @Override
    public void setModifyDt(LocalDateTime modifyDt) {
        this.modifyDt = modifyDt;
    }

    /**
     * Getter for <code>win_user_login.delete_dt</code>.
     */
    @Column(name = "delete_dt", nullable = false, precision = 3)
    @Override
    public LocalDateTime getDeleteDt() {
        return this.deleteDt;
    }

    /**
     * Setter for <code>win_user_login.delete_dt</code>.
     */
    @Override
    public void setDeleteDt(LocalDateTime deleteDt) {
        this.deleteDt = deleteDt;
    }

    /**
     * Getter for <code>win_user_login.commit_id</code>.
     */
    @Column(name = "commit_id", nullable = false, precision = 19)
    @NotNull
    @Override
    public Long getCommitId() {
        return this.commitId;
    }

    /**
     * Setter for <code>win_user_login.commit_id</code>.
     */
    @Override
    public void setCommitId(Long commitId) {
        this.commitId = commitId;
    }

    /**
     * Getter for <code>win_user_login.user_id</code>.
     */
    @Column(name = "user_id", nullable = false, precision = 19)
    @NotNull
    @Override
    public Long getUserId() {
        return this.userId;
    }

    /**
     * Setter for <code>win_user_login.user_id</code>.
     */
    @Override
    public void setUserId(Long userId) {
        this.userId = userId;
    }

    /**
     * Getter for <code>win_user_login.login_type</code>.
     */
    @Column(name = "login_type", nullable = false, precision = 10)
    @NotNull
    @Override
    public Integer getLoginType() {
        return this.loginType;
    }

    /**
     * Setter for <code>win_user_login.login_type</code>.
     */
    @Override
    public void setLoginType(Integer loginType) {
        this.loginType = loginType;
    }

    /**
     * Getter for <code>win_user_login.login_name</code>.
     */
    @Column(name = "login_name", nullable = false, length = 200)
    @NotNull
    @Size(max = 200)
    @Override
    public String getLoginName() {
        return this.loginName;
    }

    /**
     * Setter for <code>win_user_login.login_name</code>.
     */
    @Override
    public void setLoginName(String loginName) {
        this.loginName = loginName;
    }

    /**
     * Getter for <code>win_user_login.login_pass</code>.
     */
    @Column(name = "login_pass", nullable = false, length = 200)
    @NotNull
    @Size(max = 200)
    @Override
    public String getLoginPass() {
        return this.loginPass;
    }

    /**
     * Setter for <code>win_user_login.login_pass</code>.
     */
    @Override
    public void setLoginPass(String loginPass) {
        this.loginPass = loginPass;
    }

    /**
     * Getter for <code>win_user_login.login_salt</code>.
     */
    @Column(name = "login_salt", nullable = false, length = 100)
    @Size(max = 100)
    @Override
    public String getLoginSalt() {
        return this.loginSalt;
    }

    /**
     * Setter for <code>win_user_login.login_salt</code>.
     */
    @Override
    public void setLoginSalt(String loginSalt) {
        this.loginSalt = loginSalt;
    }

    /**
     * Getter for <code>win_user_login.login_para</code>.
     */
    @Column(name = "login_para", nullable = false, length = 2000)
    @NotNull
    @Size(max = 2000)
    @Override
    public String getLoginPara() {
        return this.loginPara;
    }

    /**
     * Setter for <code>win_user_login.login_para</code>.
     */
    @Override
    public void setLoginPara(String loginPara) {
        this.loginPara = loginPara;
    }

    /**
     * Getter for <code>win_user_login.auth_code</code>.
     */
    @Column(name = "auth_code", nullable = false, length = 50)
    @Size(max = 50)
    @Override
    public String getAuthCode() {
        return this.authCode;
    }

    /**
     * Setter for <code>win_user_login.auth_code</code>.
     */
    @Override
    public void setAuthCode(String authCode) {
        this.authCode = authCode;
    }

    /**
     * Getter for <code>win_user_login.bad_count</code>.
     */
    @Column(name = "bad_count", nullable = false, precision = 10)
    @Override
    public Integer getBadCount() {
        return this.badCount;
    }

    /**
     * Setter for <code>win_user_login.bad_count</code>.
     */
    @Override
    public void setBadCount(Integer badCount) {
        this.badCount = badCount;
    }

    /**
     * Getter for <code>win_user_login.status</code>.
     */
    @Column(name = "status", nullable = false, precision = 10)
    @NotNull
    @Override
    public Integer getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>win_user_login.status</code>.
     */
    @Override
    public void setStatus(Integer status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final WinUserLogin other = (WinUserLogin) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (createDt == null) {
            if (other.createDt != null)
                return false;
        }
        else if (!createDt.equals(other.createDt))
            return false;
        if (modifyDt == null) {
            if (other.modifyDt != null)
                return false;
        }
        else if (!modifyDt.equals(other.modifyDt))
            return false;
        if (deleteDt == null) {
            if (other.deleteDt != null)
                return false;
        }
        else if (!deleteDt.equals(other.deleteDt))
            return false;
        if (commitId == null) {
            if (other.commitId != null)
                return false;
        }
        else if (!commitId.equals(other.commitId))
            return false;
        if (userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!userId.equals(other.userId))
            return false;
        if (loginType == null) {
            if (other.loginType != null)
                return false;
        }
        else if (!loginType.equals(other.loginType))
            return false;
        if (loginName == null) {
            if (other.loginName != null)
                return false;
        }
        else if (!loginName.equals(other.loginName))
            return false;
        if (loginPass == null) {
            if (other.loginPass != null)
                return false;
        }
        else if (!loginPass.equals(other.loginPass))
            return false;
        if (loginSalt == null) {
            if (other.loginSalt != null)
                return false;
        }
        else if (!loginSalt.equals(other.loginSalt))
            return false;
        if (loginPara == null) {
            if (other.loginPara != null)
                return false;
        }
        else if (!loginPara.equals(other.loginPara))
            return false;
        if (authCode == null) {
            if (other.authCode != null)
                return false;
        }
        else if (!authCode.equals(other.authCode))
            return false;
        if (badCount == null) {
            if (other.badCount != null)
                return false;
        }
        else if (!badCount.equals(other.badCount))
            return false;
        if (status == null) {
            if (other.status != null)
                return false;
        }
        else if (!status.equals(other.status))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.createDt == null) ? 0 : this.createDt.hashCode());
        result = prime * result + ((this.modifyDt == null) ? 0 : this.modifyDt.hashCode());
        result = prime * result + ((this.deleteDt == null) ? 0 : this.deleteDt.hashCode());
        result = prime * result + ((this.commitId == null) ? 0 : this.commitId.hashCode());
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        result = prime * result + ((this.loginType == null) ? 0 : this.loginType.hashCode());
        result = prime * result + ((this.loginName == null) ? 0 : this.loginName.hashCode());
        result = prime * result + ((this.loginPass == null) ? 0 : this.loginPass.hashCode());
        result = prime * result + ((this.loginSalt == null) ? 0 : this.loginSalt.hashCode());
        result = prime * result + ((this.loginPara == null) ? 0 : this.loginPara.hashCode());
        result = prime * result + ((this.authCode == null) ? 0 : this.authCode.hashCode());
        result = prime * result + ((this.badCount == null) ? 0 : this.badCount.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("WinUserLogin (");

        sb.append(id);
        sb.append(", ").append(createDt);
        sb.append(", ").append(modifyDt);
        sb.append(", ").append(deleteDt);
        sb.append(", ").append(commitId);
        sb.append(", ").append(userId);
        sb.append(", ").append(loginType);
        sb.append(", ").append(loginName);
        sb.append(", ").append(loginPass);
        sb.append(", ").append(loginSalt);
        sb.append(", ").append(loginPara);
        sb.append(", ").append(authCode);
        sb.append(", ").append(badCount);
        sb.append(", ").append(status);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWinUserLogin from) {
        setId(from.getId());
        setCreateDt(from.getCreateDt());
        setModifyDt(from.getModifyDt());
        setDeleteDt(from.getDeleteDt());
        setCommitId(from.getCommitId());
        setUserId(from.getUserId());
        setLoginType(from.getLoginType());
        setLoginName(from.getLoginName());
        setLoginPass(from.getLoginPass());
        setLoginSalt(from.getLoginSalt());
        setLoginPara(from.getLoginPara());
        setAuthCode(from.getAuthCode());
        setBadCount(from.getBadCount());
        setStatus(from.getStatus());
    }

    @Override
    public <E extends IWinUserLogin> E into(E into) {
        into.from(this);
        return into;
    }
}
