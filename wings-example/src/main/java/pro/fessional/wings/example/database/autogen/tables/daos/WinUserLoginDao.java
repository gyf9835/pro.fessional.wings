/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.example.database.autogen.tables.daos;


import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import pro.fessional.wings.example.database.autogen.tables.WinUserLoginTable;
import pro.fessional.wings.example.database.autogen.tables.pojos.WinUserLogin;
import pro.fessional.wings.example.database.autogen.tables.records.WinUserLoginRecord;
import pro.fessional.wings.faceless.database.jooq.WingsJooqDaoJournalImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.List;


/**
 * The table <code>wings_example.win_user_login</code>.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.4",
        "schema version:2019070403"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class WinUserLoginDao extends WingsJooqDaoJournalImpl<WinUserLoginTable, WinUserLoginRecord, WinUserLogin, Long> {

    /**
     * Create a new WinUserLoginDao without any configuration
     */
    public WinUserLoginDao() {
        super(WinUserLoginTable.WinUserLogin, WinUserLogin.class);
    }

    /**
     * Create a new WinUserLoginDao with an attached configuration
     */
    @Autowired
    public WinUserLoginDao(Configuration configuration) {
        super(WinUserLoginTable.WinUserLogin, WinUserLogin.class, configuration);
    }

    @Override
    public Long getId(WinUserLogin object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WinUserLogin> fetchById(Long... values) {
        return fetch(WinUserLoginTable.WinUserLogin.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WinUserLogin fetchOneById(Long value) {
        return fetchOne(WinUserLoginTable.WinUserLogin.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfCreateDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<WinUserLogin> fetchByCreateDt(LocalDateTime... values) {
        return fetch(WinUserLoginTable.WinUserLogin.CreateDt, values);
    }

    /**
     * Fetch records that have <code>modify_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfModifyDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.ModifyDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_dt IN (values)</code>
     */
    public List<WinUserLogin> fetchByModifyDt(LocalDateTime... values) {
        return fetch(WinUserLoginTable.WinUserLogin.ModifyDt, values);
    }

    /**
     * Fetch records that have <code>delete_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfDeleteDt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.DeleteDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_dt IN (values)</code>
     */
    public List<WinUserLogin> fetchByDeleteDt(LocalDateTime... values) {
        return fetch(WinUserLoginTable.WinUserLogin.DeleteDt, values);
    }

    /**
     * Fetch records that have <code>commit_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfCommitId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.CommitId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>commit_id IN (values)</code>
     */
    public List<WinUserLogin> fetchByCommitId(Long... values) {
        return fetch(WinUserLoginTable.WinUserLogin.CommitId, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.UserId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<WinUserLogin> fetchByUserId(Long... values) {
        return fetch(WinUserLoginTable.WinUserLogin.UserId, values);
    }

    /**
     * Fetch records that have <code>login_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfLoginType(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.LoginType, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_type IN (values)</code>
     */
    public List<WinUserLogin> fetchByLoginType(Integer... values) {
        return fetch(WinUserLoginTable.WinUserLogin.LoginType, values);
    }

    /**
     * Fetch records that have <code>login_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfLoginName(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.LoginName, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_name IN (values)</code>
     */
    public List<WinUserLogin> fetchByLoginName(String... values) {
        return fetch(WinUserLoginTable.WinUserLogin.LoginName, values);
    }

    /**
     * Fetch records that have <code>login_pass BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfLoginPass(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.LoginPass, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_pass IN (values)</code>
     */
    public List<WinUserLogin> fetchByLoginPass(String... values) {
        return fetch(WinUserLoginTable.WinUserLogin.LoginPass, values);
    }

    /**
     * Fetch records that have <code>login_salt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfLoginSalt(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.LoginSalt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_salt IN (values)</code>
     */
    public List<WinUserLogin> fetchByLoginSalt(String... values) {
        return fetch(WinUserLoginTable.WinUserLogin.LoginSalt, values);
    }

    /**
     * Fetch records that have <code>login_para BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfLoginPara(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.LoginPara, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_para IN (values)</code>
     */
    public List<WinUserLogin> fetchByLoginPara(String... values) {
        return fetch(WinUserLoginTable.WinUserLogin.LoginPara, values);
    }

    /**
     * Fetch records that have <code>auth_code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfAuthCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.AuthCode, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth_code IN (values)</code>
     */
    public List<WinUserLogin> fetchByAuthCode(String... values) {
        return fetch(WinUserLoginTable.WinUserLogin.AuthCode, values);
    }

    /**
     * Fetch records that have <code>bad_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfBadCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.BadCount, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>bad_count IN (values)</code>
     */
    public List<WinUserLogin> fetchByBadCount(Integer... values) {
        return fetch(WinUserLoginTable.WinUserLogin.BadCount, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfStatus(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(WinUserLoginTable.WinUserLogin.Status, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<WinUserLogin> fetchByStatus(Integer... values) {
        return fetch(WinUserLoginTable.WinUserLogin.Status, values);
    }


    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.Id, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WinUserLogin> fetchByIdLive(Long... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.Id, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WinUserLogin fetchOneByIdLive(Long value) {
        return fetchOneLive(WinUserLoginTable.WinUserLogin.Id, value);
    }

    /**
     * Fetch records that have <code>create_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfCreateDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.CreateDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_dt IN (values)</code>
     */
    public List<WinUserLogin> fetchByCreateDtLive(LocalDateTime... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.CreateDt, values);
    }

    /**
     * Fetch records that have <code>modify_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfModifyDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.ModifyDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modify_dt IN (values)</code>
     */
    public List<WinUserLogin> fetchByModifyDtLive(LocalDateTime... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.ModifyDt, values);
    }

    /**
     * Fetch records that have <code>delete_dt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfDeleteDtLive(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.DeleteDt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>delete_dt IN (values)</code>
     */
    public List<WinUserLogin> fetchByDeleteDtLive(LocalDateTime... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.DeleteDt, values);
    }

    /**
     * Fetch records that have <code>commit_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfCommitIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.CommitId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>commit_id IN (values)</code>
     */
    public List<WinUserLogin> fetchByCommitIdLive(Long... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.CommitId, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfUserIdLive(Long lowerInclusive, Long upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.UserId, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<WinUserLogin> fetchByUserIdLive(Long... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.UserId, values);
    }

    /**
     * Fetch records that have <code>login_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfLoginTypeLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.LoginType, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_type IN (values)</code>
     */
    public List<WinUserLogin> fetchByLoginTypeLive(Integer... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.LoginType, values);
    }

    /**
     * Fetch records that have <code>login_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfLoginNameLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.LoginName, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_name IN (values)</code>
     */
    public List<WinUserLogin> fetchByLoginNameLive(String... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.LoginName, values);
    }

    /**
     * Fetch records that have <code>login_pass BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfLoginPassLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.LoginPass, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_pass IN (values)</code>
     */
    public List<WinUserLogin> fetchByLoginPassLive(String... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.LoginPass, values);
    }

    /**
     * Fetch records that have <code>login_salt BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfLoginSaltLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.LoginSalt, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_salt IN (values)</code>
     */
    public List<WinUserLogin> fetchByLoginSaltLive(String... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.LoginSalt, values);
    }

    /**
     * Fetch records that have <code>login_para BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfLoginParaLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.LoginPara, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_para IN (values)</code>
     */
    public List<WinUserLogin> fetchByLoginParaLive(String... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.LoginPara, values);
    }

    /**
     * Fetch records that have <code>auth_code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfAuthCodeLive(String lowerInclusive, String upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.AuthCode, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth_code IN (values)</code>
     */
    public List<WinUserLogin> fetchByAuthCodeLive(String... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.AuthCode, values);
    }

    /**
     * Fetch records that have <code>bad_count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfBadCountLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.BadCount, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>bad_count IN (values)</code>
     */
    public List<WinUserLogin> fetchByBadCountLive(Integer... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.BadCount, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WinUserLogin> fetchRangeOfStatusLive(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRangeLive(WinUserLoginTable.WinUserLogin.Status, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<WinUserLogin> fetchByStatusLive(Integer... values) {
        return fetchLive(WinUserLoginTable.WinUserLogin.Status, values);
    }
}
