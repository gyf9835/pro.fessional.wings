#!/bin/bash
THIS_VERSION=2022-01-22

cat <<EOF
#################################################
# Version $THIS_VERSION # for Mac&Lin
# 使用'ln -s'把此脚本软连接到'执行目录/workdir'，
# 其同名'env'如（wings-release.env）会被自动载入。
# 若PACK_JAR是目录，FLAT_SUB确定覆盖行为。
#################################################
EOF
################ modify the following params ################
USER_RUN="$USER" # 用来启动程序的用户
WORK_DIR=''      # 工程目录，及工作目录
DEST_DIR=''      # 目标目录，复制到本地或远程目录
FLAT_SUB=true    # 打包产物是目录时，传送内容或整个目录
PACK_JAR='*.jar' # 打包产物（文件或目录）的列表
SCP_HOST=''      # scp 主机列表，`user@host`
SCP_ARGS=''      # scp 参数项

################ NO NEED to modify the following ################
function check_cmd() {
    if ! which "$1" >/dev/null; then
        echo -e "\033[31mERROR: need command $1 \033[0m"
        exit
    fi
}

function build_mvn() {
    check_cmd mvn
    check_cmd git

    echo -e "\033[37;42;1m ==== Compile $WORK_DIR ==== \033[0m"
    mvn -U clean compile -Dmaven.test.skip=true

    _git_log="git-log.txt"
    _res_log="git-log.tmp"
    echo '#Generated by Wings Release Script' >$_git_log
    git branch -v >>$_git_log
    git log --pretty=format:'%H - %an, %ad %d : %s' --graph -10 >>$_git_log
    find . -type d -name 'classes' | grep '/target/' | while read -r res; do
        echo "$res" >>$_res_log
        cp $_git_log "$res/"
    done

    echo -e "\033[37;42;1m ==== Package $WORK_DIR ==== \033[0m"
    mvn package

    echo -e "\033[37;42;1m ==== GitLogs $WORK_DIR ==== \033[0m"
    cat "$_git_log"
    echo
    echo -e "\033[32m ==== git-log into ==== \033[0m"
    cat "$_res_log"
    echo -e "\033[32m ==== git status ==== \033[0m"
    rm -f "$_git_log" "$_res_log"
    git status
}

function build_web() {
    # node version
    if [[ -f ".nvmrc" ]]; then
        # shellcheck disable=SC1090
        source ~/.nvm/nvm.sh
        nvm use
    fi

    # build
    if [[ "$1" == "pnpm" || -f "pnpm-lock.yaml" ]]; then
        echo -e "\033[32m pnpm \033[m by lockfile, $1"
        #pnpm install
        pnpm build
    elif [[ "$1" == "yarn" || -f "yarn.lock" ]]; then
        echo -e "\033[32m yarn \033[m by lockfile, $1"
        #yarn install
        yarn build
    elif [[ "$1" == "npm" || -f "package-lock.json" ]]; then
        echo -e "\033[32m npm \033[m by lockfile, $1"
        #npm install
        npm run build
    else
        echo -e "\033[31mERROR: no env file found. $this_envs \033[0m"
    fi

    # git hash
    check_cmd git
    _ver=$(git log --pretty=format:'%H - %ad %d' -1)
    find . -maxdepth 2 -name 'index.html' | while read -r _idx; do
        echo -e "\033[32m append git hash to \033[m $_idx"
        echo "<!-- $_ver -->" >>"$_idx"
    done
}

function build_auto() {
    # mvn
    if [[ -f "pom.xml" || "$1" == "mvn" ]]; then
        build_mvn
        return
    fi
    # web
    if [[ -f "package.json" ]]; then
        build_web "$1"
        return
    fi

    echo -e "\033[31mERROR: unknown build type \033[0m"
}

#############
# load env
echo -e "\033[37;42;1mINFO: ==== boot env ==== \033[0m"
this_file="$0"
this_envs=${this_file%.*}.env
if [[ -f "$this_envs" ]]; then
    echo "env-file=$this_envs"
    # shellcheck disable=SC1090
    source "$this_envs"
else
    echo -e "\033[31mERROR: no env file found. $this_envs \033[0m"
    exit
fi

if [[ "$USER_RUN" != "$USER" ]]; then
    echo -e "\033[37;41;1mERROR: need user $USER_RUN to run \033[0m"
    exit
fi

# change workdir
if [[ "$WORK_DIR" == "" ]]; then
    WORK_DIR=$(dirname "$this_file")
fi
cd "$WORK_DIR" || exit
WORK_DIR=$(realpath -s "$WORK_DIR")
echo "work-dir=$WORK_DIR"

# check arg
case "$1" in
    pull)
        check_cmd git

        echo -e "\033[37;42;1m ==== PULL $WORK_DIR ==== \033[0m"
        git pull
        echo -e "\033[37;42;1m ==== DONE $WORK_DIR ==== \033[0m"
        git status
        ;;
    pack)
        echo -e "\033[37;42;1m ==== BUILD $WORK_DIR ==== \033[0m"
        build_auto "$2"
        ;;
    push)
        _jar_log=""
        for _jar in $PACK_JAR; do
            if [[ -f "$_jar" || -d "$_jar" ]]; then
                _jar_log="$_jar_log $_jar"
            else
                _tmp=$(find . -type f -name "$_jar")
                if [[ ! -f "$_tmp" ]]; then
                    echo -e "\033[31mERROR: not file. $_jar \033[0m"
                    exit
                fi
                _jar_log="$_jar_log $_tmp"
            fi
        done

        if [[ "$SCP_HOST" == "" ]]; then
            echo -e "\033[37;42;1m ==== COPY $DEST_DIR ==== \033[0m"
            _yna="n"
            for _jar in $_jar_log; do
                if [[ "$_yna" != "a" ]]; then
                    echo "release $_jar [y/n/a]?"
                    read -r _yna </dev/tty
                fi
                if [[ "$_yna" != "n" ]]; then
                    echo "copy $_jar to $DEST_DIR"
                    if [[ -d "$_jar" && "$FLAT_SUB" == "true" ]]; then
                        # shellcheck disable=SC2086
                        cp -rf $_jar/* "$DEST_DIR"
                    else
                        cp -rf "$_jar" "$DEST_DIR"
                    fi
                fi
            done
        else
            for _host in $SCP_HOST; do
                echo -e "\033[37;42;1m ==== SCP $_host:$DEST_DIR ==== \033[0m"
                _yna="n"
                for _jar in $_jar_log; do
                    if [[ "$_yna" != "a" ]]; then
                        echo "release $_jar [y/n/a]?"
                        read -r _yna </dev/tty
                    fi
                    if [[ "$_yna" != "n" ]]; then
                        echo "scp $_jar to $_host:$DEST_DIR"
                        if [[ -d "$_jar" && "$FLAT_SUB" == "true" ]]; then
                            # shellcheck disable=SC2086
                            scp -r $SCP_ARGS $_jar/* "$_host:$DEST_DIR"
                        else
                            # shellcheck disable=SC2086
                            scp -r $SCP_ARGS "$_jar" "$_host:$DEST_DIR"
                        fi
                    fi
                done
            done
        fi
        ;;
    *)
        echo -e '\033[37;42;1mNOTE: help info, use the following\033[m'
        echo -e '\033[32m pull \033[m git pull remote'
        echo -e '\033[32m pack \033[m auto mvn/npm/yarn/pnpm '
        echo -e '\033[32m pack mvn \033[m mvn clean,compile, package'
        echo -e '\033[32m pack npm \033[m npm install, build'
        echo -e '\033[32m pack pnpm \033[m pnpm install, build'
        echo -e '\033[32m pack yarn \033[m yarn install, build'
        echo -e '\033[32m push \033[m push jar'
        ;;
esac
echo
