/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.oracle.database.autogen.tables.pojos;


import java.time.LocalDateTime;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import pro.fessional.wings.oracle.database.autogen.tables.interfaces.ISysSchemaVersion;
import pro.fessional.wings.oracle.service.lightid.LightIdAware;


/**
 * The table <code>wings.SYS_SCHEMA_VERSION</code>.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9",
        "schema version:2019051201"
    },
    date = "2019-06-03T13:01:45.550Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "SYS_SCHEMA_VERSION")
public class SysSchemaVersion implements LightIdAware, ISysSchemaVersion {

    private static final long serialVersionUID = -1971839802;

    private Long          revision;
    private LocalDateTime createDt;
    private LocalDateTime modifyDt;
    private Long          commitId;
    private String        execSql;
    private String        execMd5;
    private String        undoSql;
    private String        undoMd5;
    private LocalDateTime applyDt;

    public SysSchemaVersion() {}

    public SysSchemaVersion(ISysSchemaVersion value) {
        this.revision = value.getRevision();
        this.createDt = value.getCreateDt();
        this.modifyDt = value.getModifyDt();
        this.commitId = value.getCommitId();
        this.execSql = value.getExecSql();
        this.execMd5 = value.getExecMd5();
        this.undoSql = value.getUndoSql();
        this.undoMd5 = value.getUndoMd5();
        this.applyDt = value.getApplyDt();
    }

    public SysSchemaVersion(
        Long          revision,
        LocalDateTime createDt,
        LocalDateTime modifyDt,
        Long          commitId,
        String        execSql,
        String        execMd5,
        String        undoSql,
        String        undoMd5,
        LocalDateTime applyDt
    ) {
        this.revision = revision;
        this.createDt = createDt;
        this.modifyDt = modifyDt;
        this.commitId = commitId;
        this.execSql = execSql;
        this.execMd5 = execMd5;
        this.undoSql = undoSql;
        this.undoMd5 = undoMd5;
        this.applyDt = applyDt;
    }

    @Id
    @Column(name = "REVISION", unique = true, nullable = false, precision = 19)
    @NotNull
    @Override
    public Long getRevision() {
        return this.revision;
    }

    @Override
    public void setRevision(Long revision) {
        this.revision = revision;
    }

    @Column(name = "CREATE_DT", nullable = false)
    @Override
    public LocalDateTime getCreateDt() {
        return this.createDt;
    }

    @Override
    public void setCreateDt(LocalDateTime createDt) {
        this.createDt = createDt;
    }

    @Column(name = "MODIFY_DT", nullable = false)
    @Override
    public LocalDateTime getModifyDt() {
        return this.modifyDt;
    }

    @Override
    public void setModifyDt(LocalDateTime modifyDt) {
        this.modifyDt = modifyDt;
    }

    @Column(name = "COMMIT_ID", nullable = false, precision = 19)
    @NotNull
    @Override
    public Long getCommitId() {
        return this.commitId;
    }

    @Override
    public void setCommitId(Long commitId) {
        this.commitId = commitId;
    }

    @Column(name = "EXEC_SQL", nullable = false, length = 65535)
    @NotNull
    @Size(max = 65535)
    @Override
    public String getExecSql() {
        return this.execSql;
    }

    @Override
    public void setExecSql(String execSql) {
        this.execSql = execSql;
    }

    @Column(name = "EXEC_MD5", nullable = false, length = 32)
    @Size(max = 32)
    @Override
    public String getExecMd5() {
        return this.execMd5;
    }

    @Override
    public void setExecMd5(String execMd5) {
        this.execMd5 = execMd5;
    }

    @Column(name = "UNDO_SQL", nullable = false, length = 65535)
    @NotNull
    @Size(max = 65535)
    @Override
    public String getUndoSql() {
        return this.undoSql;
    }

    @Override
    public void setUndoSql(String undoSql) {
        this.undoSql = undoSql;
    }

    @Column(name = "UNDO_MD5", nullable = false, length = 32)
    @Size(max = 32)
    @Override
    public String getUndoMd5() {
        return this.undoMd5;
    }

    @Override
    public void setUndoMd5(String undoMd5) {
        this.undoMd5 = undoMd5;
    }

    @Column(name = "APPLY_DT", nullable = false)
    @Override
    public LocalDateTime getApplyDt() {
        return this.applyDt;
    }

    @Override
    public void setApplyDt(LocalDateTime applyDt) {
        this.applyDt = applyDt;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final SysSchemaVersion other = (SysSchemaVersion) obj;
        if (revision == null) {
            if (other.revision != null)
                return false;
        }
        else if (!revision.equals(other.revision))
            return false;
        if (createDt == null) {
            if (other.createDt != null)
                return false;
        }
        else if (!createDt.equals(other.createDt))
            return false;
        if (modifyDt == null) {
            if (other.modifyDt != null)
                return false;
        }
        else if (!modifyDt.equals(other.modifyDt))
            return false;
        if (commitId == null) {
            if (other.commitId != null)
                return false;
        }
        else if (!commitId.equals(other.commitId))
            return false;
        if (execSql == null) {
            if (other.execSql != null)
                return false;
        }
        else if (!execSql.equals(other.execSql))
            return false;
        if (execMd5 == null) {
            if (other.execMd5 != null)
                return false;
        }
        else if (!execMd5.equals(other.execMd5))
            return false;
        if (undoSql == null) {
            if (other.undoSql != null)
                return false;
        }
        else if (!undoSql.equals(other.undoSql))
            return false;
        if (undoMd5 == null) {
            if (other.undoMd5 != null)
                return false;
        }
        else if (!undoMd5.equals(other.undoMd5))
            return false;
        if (applyDt == null) {
            if (other.applyDt != null)
                return false;
        }
        else if (!applyDt.equals(other.applyDt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.revision == null) ? 0 : this.revision.hashCode());
        result = prime * result + ((this.createDt == null) ? 0 : this.createDt.hashCode());
        result = prime * result + ((this.modifyDt == null) ? 0 : this.modifyDt.hashCode());
        result = prime * result + ((this.commitId == null) ? 0 : this.commitId.hashCode());
        result = prime * result + ((this.execSql == null) ? 0 : this.execSql.hashCode());
        result = prime * result + ((this.execMd5 == null) ? 0 : this.execMd5.hashCode());
        result = prime * result + ((this.undoSql == null) ? 0 : this.undoSql.hashCode());
        result = prime * result + ((this.undoMd5 == null) ? 0 : this.undoMd5.hashCode());
        result = prime * result + ((this.applyDt == null) ? 0 : this.applyDt.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SysSchemaVersion (");

        sb.append(revision);
        sb.append(", ").append(createDt);
        sb.append(", ").append(modifyDt);
        sb.append(", ").append(commitId);
        sb.append(", ").append(execSql);
        sb.append(", ").append(execMd5);
        sb.append(", ").append(undoSql);
        sb.append(", ").append(undoMd5);
        sb.append(", ").append(applyDt);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(ISysSchemaVersion from) {
        setRevision(from.getRevision());
        setCreateDt(from.getCreateDt());
        setModifyDt(from.getModifyDt());
        setCommitId(from.getCommitId());
        setExecSql(from.getExecSql());
        setExecMd5(from.getExecMd5());
        setUndoSql(from.getUndoSql());
        setUndoMd5(from.getUndoMd5());
        setApplyDt(from.getApplyDt());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends ISysSchemaVersion> E into(E into) {
        into.from(this);
        return into;
    }
}
