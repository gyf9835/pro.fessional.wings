/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.oracle.database.autogen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import pro.fessional.wings.oracle.database.autogen.DefaultSchema;
import pro.fessional.wings.oracle.database.autogen.tables.records.SysCommitJournalRecord;
import pro.fessional.wings.oracle.service.lightid.LightIdAware;


/**
 * The table <code>wings.SYS_COMMIT_JOURNAL</code>.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9",
        "schema version:2019051201"
    },
    date = "2019-06-03T13:01:45.550Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysCommitJournal extends TableImpl<SysCommitJournalRecord> implements LightIdAware {

    private static final long serialVersionUID = -929384103;

    /**
     * The reference instance of <code>SYS_COMMIT_JOURNAL</code>
     */
    public static final SysCommitJournal SYS_COMMIT_JOURNAL = new SysCommitJournal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysCommitJournalRecord> getRecordType() {
        return SysCommitJournalRecord.class;
    }

    /**
     * The column <code>SYS_COMMIT_JOURNAL.ID</code>.
     */
    public final TableField<SysCommitJournalRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "主键");

    /**
     * The column <code>SYS_COMMIT_JOURNAL.CREATE_DT</code>.
     */
    public final TableField<SysCommitJournalRecord, LocalDateTime> CREATE_DT = createField("CREATE_DT", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建日时");

    /**
     * The column <code>SYS_COMMIT_JOURNAL.EVENT_NAME</code>.
     */
    public final TableField<SysCommitJournalRecord, String> EVENT_NAME = createField("EVENT_NAME", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "事件名称");

    /**
     * The column <code>SYS_COMMIT_JOURNAL.TARGET_KEY</code>.
     */
    public final TableField<SysCommitJournalRecord, String> TARGET_KEY = createField("TARGET_KEY", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "目标数据特征");

    /**
     * The column <code>SYS_COMMIT_JOURNAL.LOGIN_INFO</code>.
     */
    public final TableField<SysCommitJournalRecord, String> LOGIN_INFO = createField("LOGIN_INFO", org.jooq.impl.SQLDataType.CLOB, this, "登陆信息，用户，终端等");

    /**
     * The column <code>SYS_COMMIT_JOURNAL.OTHER_INFO</code>.
     */
    public final TableField<SysCommitJournalRecord, String> OTHER_INFO = createField("OTHER_INFO", org.jooq.impl.SQLDataType.CLOB, this, "其他信息，业务侧自定义");

    /**
     * Create a <code>SYS_COMMIT_JOURNAL</code> table reference
     */
    public SysCommitJournal() {
        this(DSL.name("SYS_COMMIT_JOURNAL"), null);
    }

    /**
     * Create an aliased <code>SYS_COMMIT_JOURNAL</code> table reference
     */
    public SysCommitJournal(String alias) {
        this(DSL.name(alias), SYS_COMMIT_JOURNAL);
    }

    /**
     * Create an aliased <code>SYS_COMMIT_JOURNAL</code> table reference
     */
    public SysCommitJournal(Name alias) {
        this(alias, SYS_COMMIT_JOURNAL);
    }

    private SysCommitJournal(Name alias, Table<SysCommitJournalRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysCommitJournal(Name alias, Table<SysCommitJournalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("变更日志"));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SysCommitJournalRecord> getPrimaryKey() {
        return Internal.createUniqueKey(pro.fessional.wings.oracle.database.autogen.tables.SysCommitJournal.SYS_COMMIT_JOURNAL, "KEY_SYS_COMMIT_JOURNAL_PRIMARY", pro.fessional.wings.oracle.database.autogen.tables.SysCommitJournal.SYS_COMMIT_JOURNAL.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SysCommitJournalRecord>> getKeys() {
        return Arrays.<UniqueKey<SysCommitJournalRecord>>asList(
              Internal.createUniqueKey(pro.fessional.wings.oracle.database.autogen.tables.SysCommitJournal.SYS_COMMIT_JOURNAL, "KEY_SYS_COMMIT_JOURNAL_PRIMARY", pro.fessional.wings.oracle.database.autogen.tables.SysCommitJournal.SYS_COMMIT_JOURNAL.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysCommitJournal as(String alias) {
        return new SysCommitJournal(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysCommitJournal as(Name alias) {
        return new SysCommitJournal(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysCommitJournal rename(String name) {
        return new SysCommitJournal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysCommitJournal rename(Name name) {
        return new SysCommitJournal(name, null);
    }
}
