/*
 * This file is generated by jOOQ.
 */
package pro.fessional.wings.oracle.database.autogen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import pro.fessional.wings.oracle.database.autogen.DefaultSchema;
import pro.fessional.wings.oracle.database.autogen.tables.records.SysSchemaVersionRecord;
import pro.fessional.wings.oracle.service.lightid.LightIdAware;


/**
 * The table <code>wings.SYS_SCHEMA_VERSION</code>.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9",
        "schema version:2019051201"
    },
    date = "2019-06-03T13:01:45.550Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysSchemaVersion extends TableImpl<SysSchemaVersionRecord> implements LightIdAware {

    private static final long serialVersionUID = 1655790542;

    /**
     * The reference instance of <code>SYS_SCHEMA_VERSION</code>
     */
    public static final SysSchemaVersion SYS_SCHEMA_VERSION = new SysSchemaVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysSchemaVersionRecord> getRecordType() {
        return SysSchemaVersionRecord.class;
    }

    /**
     * The column <code>SYS_SCHEMA_VERSION.REVISION</code>.
     */
    public final TableField<SysSchemaVersionRecord, Long> REVISION = createField("REVISION", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "版本号+修订号");

    /**
     * The column <code>SYS_SCHEMA_VERSION.CREATE_DT</code>.
     */
    public final TableField<SysSchemaVersionRecord, LocalDateTime> CREATE_DT = createField("CREATE_DT", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建日时");

    /**
     * The column <code>SYS_SCHEMA_VERSION.MODIFY_DT</code>.
     */
    public final TableField<SysSchemaVersionRecord, LocalDateTime> MODIFY_DT = createField("MODIFY_DT", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1000-01-01 00:00:00", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "修改日时");

    /**
     * The column <code>SYS_SCHEMA_VERSION.COMMIT_ID</code>.
     */
    public final TableField<SysSchemaVersionRecord, Long> COMMIT_ID = createField("COMMIT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "提交ID");

    /**
     * The column <code>SYS_SCHEMA_VERSION.EXEC_SQL</code>.
     */
    public final TableField<SysSchemaVersionRecord, String> EXEC_SQL = createField("EXEC_SQL", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "升级脚本");

    /**
     * The column <code>SYS_SCHEMA_VERSION.EXEC_MD5</code>.
     */
    public final TableField<SysSchemaVersionRecord, String> EXEC_MD5 = createField("EXEC_MD5", org.jooq.impl.SQLDataType.CHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "升级指纹");

    /**
     * The column <code>SYS_SCHEMA_VERSION.UNDO_SQL</code>.
     */
    public final TableField<SysSchemaVersionRecord, String> UNDO_SQL = createField("UNDO_SQL", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "降级脚本");

    /**
     * The column <code>SYS_SCHEMA_VERSION.UNDO_MD5</code>.
     */
    public final TableField<SysSchemaVersionRecord, String> UNDO_MD5 = createField("UNDO_MD5", org.jooq.impl.SQLDataType.CHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "降级指纹");

    /**
     * The column <code>SYS_SCHEMA_VERSION.APPLY_DT</code>.
     */
    public final TableField<SysSchemaVersionRecord, LocalDateTime> APPLY_DT = createField("APPLY_DT", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1000-01-01 00:00:00", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "执行日时");

    /**
     * Create a <code>SYS_SCHEMA_VERSION</code> table reference
     */
    public SysSchemaVersion() {
        this(DSL.name("SYS_SCHEMA_VERSION"), null);
    }

    /**
     * Create an aliased <code>SYS_SCHEMA_VERSION</code> table reference
     */
    public SysSchemaVersion(String alias) {
        this(DSL.name(alias), SYS_SCHEMA_VERSION);
    }

    /**
     * Create an aliased <code>SYS_SCHEMA_VERSION</code> table reference
     */
    public SysSchemaVersion(Name alias) {
        this(alias, SYS_SCHEMA_VERSION);
    }

    private SysSchemaVersion(Name alias, Table<SysSchemaVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysSchemaVersion(Name alias, Table<SysSchemaVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("表结构版本"));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SysSchemaVersionRecord> getPrimaryKey() {
        return Internal.createUniqueKey(pro.fessional.wings.oracle.database.autogen.tables.SysSchemaVersion.SYS_SCHEMA_VERSION, "KEY_SYS_SCHEMA_VERSION_PRIMARY", pro.fessional.wings.oracle.database.autogen.tables.SysSchemaVersion.SYS_SCHEMA_VERSION.REVISION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SysSchemaVersionRecord>> getKeys() {
        return Arrays.<UniqueKey<SysSchemaVersionRecord>>asList(
              Internal.createUniqueKey(pro.fessional.wings.oracle.database.autogen.tables.SysSchemaVersion.SYS_SCHEMA_VERSION, "KEY_SYS_SCHEMA_VERSION_PRIMARY", pro.fessional.wings.oracle.database.autogen.tables.SysSchemaVersion.SYS_SCHEMA_VERSION.REVISION)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysSchemaVersion as(String alias) {
        return new SysSchemaVersion(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysSchemaVersion as(Name alias) {
        return new SysSchemaVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysSchemaVersion rename(String name) {
        return new SysSchemaVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysSchemaVersion rename(Name name) {
        return new SysSchemaVersion(name, null);
    }
}
